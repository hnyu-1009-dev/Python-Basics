# Python里，记录日志使用logging库，日志的级别从高到低分别为：
# 1.CRITICAL：系统崩溃级别的错误，必须立即处理
# 2.ERROR：运行时的错误，可能导致程序无法正常执行
# 3.WARNING：警告信息
# 4.INFO：信息性消息，程序正常运行
# 5.DEBUG：详细信息，通常在诊断问题时有用
# 6.NOTSET：表示未设置级别,将继承父 Logger 的日志级别；
# 我们可以用logging.getLogger()方法获取一个logger对象，然后调用它的各种方法记录日志。
# 例如，我们可以用下面的代码记录一条INFO级别的日志：
# =====================================================================================================
# 📘 Python logging 日志级别说明
# -----------------------------------------------------------------------------------------------------
# | 级别名称         | 数值 | 含义             |
# |----------------|------|-----------------|
# | DEBUG          | 10   | 调试信息，最详细   |
# | INFO           | 20   | 普通运行信息      |
# | WARNING        | 30   | 警告信息         |
# | ERROR          | 40   | 错误信息         |
# | CRITICAL       | 50   | 致命错误         |
# | NOTSET         | 0    | 特殊值：未设置级别 |
# -----------------------------------------------------------------------------------------------------
# =====================================================================================================

import logging

# 设置可以被打印的日志级别
# logging.basicConfig(level=logging.debug())
# 也可以设置日志格式
logging.basicConfig(filename='./example.log',  # 设置日志打印文件名
                    level=logging.DEBUG,  # 设置日志打印级别
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',  # 设置日志格式
                    filemode='a')  # 追加模式
logging.critical("这是一个CRITICAL信息")
logging.error("这是一个error信息")
logging.warning("这是一个warning信息")
# 下面这部分日志不会被打印出来，因为默认的日志级别是WARNING
logging.info("这是一个info信息")
logging.debug("这是一个debug信息")

# logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
#
# logger = logging.getLogger(__name__)
#
# logger.info('This is an info message')
# 常用日志格式占位符（用于 format 参数）：
# -----------------------------------------------------------------------------------------------------
# | 占位符            | 含义               | 示例值                          |
# |-------------------|--------------------|----------------------------------|
# | %(asctime)s       | 当前时间           | 2025-10-17 10:25:33,123         |
# | %(name)s          | Logger 名称        | root / app.module               |
# | %(levelname)s     | 日志级别名称       | INFO / DEBUG / ERROR            |
# | %(message)s       | 日志内容           | 系统启动成功                    |
# | %(filename)s      | 当前文件名         | main.py                         |
# | %(funcName)s      | 函数名             | run_task                        |
# | %(lineno)d        | 行号               | 42                              |
# | %(process)d       | 进程 ID            | 12345                           |
# | %(threadName)s    | 线程名称           | MainThread                      |
# -----------------------------------------------------------------------------------------------------
#
# 常用格式模板示例：
# -----------------------------------------------------------------------------------------------------
# ✅ 基础格式：
# format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
# 输出示例：
# 2025-10-17 10:25:33,123 - root - INFO - 系统启动成功
#
# ✅ 调试格式（带文件名与行号）：
# format='%(asctime)s [%(filename)s:%(lineno)d] %(levelname)s - %(message)s'
# 输出示例：
# 2025-10-17 10:25:33,123 [main.py:42] DEBUG - 数据加载完成
#
# ✅ 综合推荐格式（开发常用）：
# format='[%(asctime)s] [%(levelname)s] [%(filename)s:%(lineno)d] - %(message)s'
# 输出示例：
# [2025-10-17 10:25:33,123] [ERROR] [database.py:87] - 数据库连接失败
# -----------------------------------------------------------------------------------------------------
#
# 时间格式（datefmt 参数）：
# -----------------------------------------------------------------------------------------------------
# 示例：
# datefmt='%Y-%m-%d %H:%M:%S'
# 常见格式符：
#   %Y 年   %m 月   %d 日   %H 时(24小时)   %M 分   %S 秒
# -----------------------------------------------------------------------------------------------------
#
# 完整示例代码：
# -----------------------------------------------------------------------------------------------------
# import logging
#
# logging.basicConfig(
#     filename='./example.log',                            # 日志文件名
#     level=logging.DEBUG,                                 # 日志级别
#     format='[%(asctime)s] [%(levelname)s] [%(filename)s:%(lineno)d] - %(message)s',
#     datefmt='%Y-%m-%d %H:%M:%S',                         # 时间格式
#     filemode='a'                                         # 追加写入
# )
#
# logging.debug("调试模式：变量值检查")
# logging.info("系统启动成功")
# logging.warning("磁盘空间不足")
# logging.error("文件读取失败")
# logging.critical("系统崩溃！")
# -----------------------------------------------------------------------------------------------------
# 输出示例：
# [2025-10-17 10:25:33] [DEBUG] [main.py:10] - 调试模式：变量值检查
# [2025-10-17 10:25:33] [INFO]  [main.py:11] - 系统启动成功
# [2025-10-17 10:25:33] [WARNING] [main.py:12] - 磁盘空间不足
# [2025-10-17 10:25:33] [ERROR] [main.py:13] - 文件读取失败
# [2025-10-17 10:25:33] [CRITICAL] [main.py:14] - 系统崩溃！
# =====================================================================================================
