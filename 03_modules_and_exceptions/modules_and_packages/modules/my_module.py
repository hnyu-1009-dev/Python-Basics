# ============================================================================================================
# Python 模块与包学习
# ============================================================================================================
# 作者：于昊男
# 目的：帮助学习模块的自定义以及常用模块的使用
# 说明：每段代码都附带详细注释与命名规范建议
# ============================================================================================================
# 定义一个模块中哪些变量可以被导入
# __all__只能对from语句起作用，对import语句无效。
# 因此，如果想使用__all__，必须使用from语句导入模块。
__all__ = ["test_function1", "test_function2"]


def test_function1(x_test_function1, y_test_function1):
    print(x_test_function1, y_test_function1)
    print("This is a test function1 in my_module.py")


def test_function2(x_test_function2, y_test_function2):
    print(x_test_function2, y_test_function2)
    print("This is a test function2 in my_module.py")


def test_function3(x_test_function3, y_test_function3):
    print(x_test_function3, y_test_function3)
    print("This is a test function3 in my_module.py")
    print("用来测试__all__变量")


if __name__ == '__main__':
    print("调用了主函数")

x_global_test = 10
y_global_test = 20

#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
##
#
#
#
#
#
#
#
#
#
#
#
#
##
#
#
#
#
#
#
#
#
#
#
#
#
##
#
#
#
#
#
#
#
#
#
#
#
#
#
# ============================================================================================================
# 📘 模块（Module）的概念与定义笔记
# ============================================================================================================
# 一、模块的基本概念
# 模块（Module）是程序设计中的一个独立功能单位。
# 它将程序划分为若干个具有特定功能、相对独立的部分，
# 每个模块通常对应一个文件或一个逻辑组件。

# 模块化（Modularization）是一种程序设计思想，
# 通过将大型系统拆分为若干小模块，降低系统的复杂性、提高可维护性与可复用性。

# 二、模块的主要特征
# 1️⃣ 独立性（Independence）
#     每个模块能独立完成特定功能，内部实现对外部模块透明。
# 2️⃣ 接口性（Interface）
#     模块通过清晰的接口（函数、类、API）与其他模块通信。
# 3️⃣ 封装性（Encapsulation）
#     模块对外隐藏内部数据结构与实现细节，仅暴露必要接口。
# 4️⃣ 可复用性（Reusability）
#     模块可被其他程序或项目重复使用，减少重复代码。
# 5️⃣ 可维护性（Maintainability）
#     模块化设计使得修改或扩展某一部分功能时，不影响整体系统。

# 三、模块的作用与优势
# ✅ 降低程序复杂度
# ✅ 提高代码复用率
# ✅ 方便团队协作开发
# ✅ 支持分层架构与功能扩展
# ✅ 有利于测试与调试（可单独测试每个模块）

# 四、模块与其他编程概念的关系
# 📍 模块 vs 类（Class）
#     模块是程序的结构单元，类是模块中的对象定义单元。
# 📍 模块 vs 包（Package）
#     包是由多个模块组成的集合，是更高层次的组织方式。
# 📍 模块 vs 函数（Function）
#     模块由若干函数组成，是函数的上层组织单位。

# 五、不同语言中的模块实现方式
# 1️⃣ Python：每个 .py 文件即为一个模块，可通过 import 导入。
# 2️⃣ Java：模块由包（package）和类（class）组成，Java 9 引入 module-info.java。
# 3️⃣ JavaScript / Vue：使用 ES Module (import/export) 管理模块。
# 4️⃣ C / C++：模块通常由 .h（头文件）和 .cpp（实现文件）构成。
# 5️⃣ Spring Boot：模块可以按功能划分为 controller、service、repository 等逻辑层。

# 六、模块设计原则（高内聚、低耦合）
# ✅ 高内聚（High Cohesion）
#     模块内部的功能应紧密相关，形成一个完整的逻辑单元。
# ✅ 低耦合（Low Coupling）
#     模块间依赖尽量减少，修改一个模块不会影响其他模块。

# 七、模块划分的一般方法
# 📌 按功能划分（功能模块）
# 📌 按层次划分（表现层 / 业务层 / 数据层）
# 📌 按数据流划分（输入处理模块、分析模块、输出模块）
# 📌 按职责划分（用户管理模块、日志模块、传感器模块等）
# ============================================================================================================


# ============================================================================================================
# ✅ 总结：
# 模块是软件系统中的功能单元，具有独立性、可复用性与可维护性。
# 模块化设计是现代软件工程的重要思想，贯穿于前后端开发全过程。
# ============================================================================================================
