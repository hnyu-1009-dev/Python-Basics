"""
📦 包加载流程：
───────────────────────────────────────────────
import my_package
      ↓
🔹 Python 搜索路径 sys.path 中查找 my_package 文件夹
      ↓
🔹 检查是否包含 __init__.py
      ↓
🔹 执行 __init__.py 顶层代码
      ↓
🔹 创建包对象（module type）
      ↓
🔹 把包名 my_package 注册到 sys.modules 缓存
      ↓
🔹 在当前命名空间中创建变量 my_package → 指向包对象
───────────────────────────────────────────────
"""
# 可以在这里手动导入子模块，方便包的统一调用
from .module1 import func1
from .module2 import func2

# 还可以控制 “from mypackage import *” 导出的内容
__all__ = ["func1", "func2"]
# 当你 import mypackage 时，这个文件中的代码会自动执行
print("zhelishimypackage 已被导入！")
# =====================================================================================================
# ✅ 总结：__init__.py 的主要作用
# -----------------------------------------------------------------------------------------------------
# 作用分类 | 功能描述
# --------|--------------------------------------------------------
# 包标识   | 告诉 Python 当前目录是一个可导入的包
# 初始化   | 执行包加载时的初始化代码
# 导入控制 | 通过 __all__ 控制 from ... import * 的行为
# 导出接口 | 让外部可以更方便地调用包内函数或类
# 统一管理 | 在包加载时导入子包、定义版本、作者等元信息
# -----------------------------------------------------------------------------------------------------
# 💡 建议：
#   - 无论 Python 版本如何，始终保留 __init__.py 文件
#   - 在其中维护包的公共接口和元数据
# =====================================================================================================
